# Mostly taken from binary-install (https://github.com/EverlastingBugstopper/binary-install) thanks!

on:
  push:
    tags:
      - "rust_v*"

env:
  RELEASE_BIN: i18n-label-merger
  RELEASE_DIR: artifacts
  WORKING_DIR: ./i18n-label-tools-binary
  GITHUB_REF: "${{ github.ref }}"
  WINDOWS_TARGET: x86_64-pc-windows-msvc
  MACOS_TARGET: x86_64-apple-darwin
  MACOS_ARM_TARGET: aarch64-apple-darwin
  LINUX_TARGET: x86_64-unknown-linux-musl

name: Release Rust binaries

jobs:
  build:
    name: Build Artifacts
    runs-on: ${{ matrix.os}}
    strategy:
      matrix:
        build: [macos]
        include:
          # Starting with apple darwin first
          # - os: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          # - os: windows-latest
          #   target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:15}"
          echo ::set-output name=version::"${GITHUB_REF:15}"

      - name: Install p7zip (MacOS)
        if: matrix.build == 'macos'
        run: brew install p7zip

      - name: Build (MacOS)
        if: matrix.build == 'macos'
        run: cargo build --release

      - name: Create artifact directory
        run: |
          mkdir ${{ env.RELEASE_DIR }}
          mkdir dist

      - name: Create tarball (MacOS)
        if: matrix.build == 'macos'
        run: |
          mv ./target/release/${{ env.RELEASE_BIN }} ./dist/${{ env.RELEASE_BIN }}
          7z a -ttar -so -an ./dist | 7z a -si ./${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_ARM_TARGET }}.tar.gz

      - name: Upload Zip
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.build }}
          path: ./${{ env.RELEASE_DIR }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      packages: write
      actions: write
    steps:
      - name: Query version number
        id: get_version
        shell: bash
        run: |
          echo "using version tag ${GITHUB_REF:15}"
          echo ::set-output name=version::"${GITHUB_REF:15}"

      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: macos
          path: ${{ env.RELEASE_DIR }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            Changes in this Release
          draft: false
          prerelease: false

      - name: Release MacOS tarball
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.RELEASE_DIR }}/${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_ARM_TARGET }}.tar.gz
          asset_name: ${{ env.RELEASE_BIN }}-${{ steps.get_version.outputs.VERSION }}-${{ env.MACOS_ARM_TARGET }}.tar.gz
          asset_content_type: application/gzip

